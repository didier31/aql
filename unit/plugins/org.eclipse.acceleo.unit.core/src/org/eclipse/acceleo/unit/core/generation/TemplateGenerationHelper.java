/*******************************************************************************
 * Copyright (c) 2006, 2014 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************/
package org.eclipse.acceleo.unit.core.generation;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.eclipse.acceleo.engine.generation.AcceleoEngine;
import org.eclipse.acceleo.engine.generation.IAcceleoEngine2;
import org.eclipse.acceleo.engine.generation.strategy.PreviewStrategy;
import org.eclipse.acceleo.internal.traceability.engine.AcceleoTraceabilityEngine;
import org.eclipse.acceleo.model.mtl.ModuleElement;
import org.eclipse.acceleo.model.mtl.Template;
import org.eclipse.acceleo.traceability.GeneratedFile;
import org.eclipse.acceleo.traceability.GeneratedText;
import org.eclipse.emf.common.util.BasicMonitor;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.ocl.ecore.Variable;

/**
 * The acceleo template generation helper class.
 * 
 * @author <a href="mailto:hugo.marchadour@obeo.fr">Hugo Marchadour</a>
 * @author <a href="mailto:stephane.begaudeau@obeo.fr">Stephane Begaudeau</a>
 */
@SuppressWarnings("restriction")
public class TemplateGenerationHelper extends AbstractGenerationHelper {

	/**
	 * The generated content.
	 */
	private String generatedContent;

	/**
	 * The generated files content.
	 */
	private Map<String, String> generatedFilesContent;

	/**
	 * Indicates if we should activate the traceability.
	 */
	private boolean traceabilityEnable;

	/**
	 * The traceability listener.
	 */
	private TextGenerationListener traceabilityListener;

	/**
	 * The files generated content.
	 */
	private boolean filesGenerated;

	/**
	 * The constructor.
	 * 
	 * @param modulePath
	 *            the module path.
	 * @param index
	 *            the signature index.
	 * @param templateQualifiedName
	 *            the template qualified name.
	 */
	public TemplateGenerationHelper(String modulePath, int index, String templateQualifiedName) {
		super(modulePath, index, templateQualifiedName);
		filesGenerated = false;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.acceleo.unit.core.generation.AbstractGenerationHelper#generate()
	 */
	@Override
	public void generate() {
		generateHelper(false);
	}

	/**
	 * Generate all test case for the traceability test.
	 */
	public void generateFile() {
		generateHelper(true);
	}

	/**
	 * Return the list of regions generated by a model element.
	 * 
	 * @param eObject
	 *            the model element.
	 * @return the regions list.
	 */
	public List<Region> getGeneratedRegionsFor(EObject eObject) {

		List<Region> regions = new ArrayList<Region>();
		List<GeneratedFile> generatedFiles = traceabilityListener.getGeneratedFiles();
		for (GeneratedFile generatedFile : generatedFiles) {

			List<GeneratedText> generatedRegions = generatedFile.getGeneratedRegions();
			for (GeneratedText generatedText : generatedRegions) {

				EObject modelElement = generatedText.getSourceElement().getModelElement();
				if (modelElement.equals(eObject)) {
					int startOffset = generatedText.getStartOffset();
					int endOffset = generatedText.getEndOffset();

					String content = generatedFilesContent.get(generatedFile.getPath());
					String text = content.substring(startOffset, endOffset);
					regions.add(new Region(text, startOffset, endOffset));
				}
			}
		}

		return regions;
	}

	/**
	 * Factorization of generate and generate file methods.
	 * 
	 * @param generateFile
	 *            the generate file.
	 */
	private void generateHelper(boolean generateFile) {

		if (modelElement == null) {
			throw new IllegalArgumentException("Model element is null"); //$NON-NLS-1$
		}

		this.module = this.loadModule();
		if (this.module == null) {
			throw new IllegalArgumentException("Module is null"); //$NON-NLS-1$
		}

		BasicMonitor monitor = new BasicMonitor();
		List<Object> arguments = new ArrayList<Object>();
		arguments.add(modelElement);

		IAcceleoEngine2 engine = new AcceleoEngine();
		if (traceabilityEnable) {
			engine = new AcceleoTraceabilityEngine();

			this.traceabilityListener = new TextGenerationListener();
			engine.addListener(this.traceabilityListener);
		}

		List<Template> templates = new ArrayList<Template>();
		if (module != null) {
			List<ModuleElement> moduleElements = module.getOwnedModuleElement();
			for (ModuleElement element : moduleElements) {

				if (element instanceof Template) {
					Template template = (Template)element;
					if (getQualifiedName().equals(((Template)element).getName())) {
						templates.add(template);
					}
				}
			}
		}

		if (templates.size() == 0) {
			throw new IllegalArgumentException("No template could be found"); //$NON-NLS-1$
		}

		Template template = templates.get(index);
		if (template == null) {
			throw new IllegalArgumentException("The template : " + getQualifiedName() //$NON-NLS-1$
					+ " does not exist or the index : " + index + " is not valid."); //$NON-NLS-1$ //$NON-NLS-2$
		}

		Variable variable = template.getParameter().get(0);
		if (variable.getType().isInstance(modelElement)) {
			if (generateFile) {
				generatedFilesContent = engine.evaluate(template, arguments, null, new PreviewStrategy(),
						monitor);
				filesGenerated = true;
			} else {
				Object evaluationResult = engine
						.evaluate(template, arguments, new PreviewStrategy(), monitor);
				if (evaluationResult instanceof String) {
					generatedContent = (String)evaluationResult;
					generated = true;
				} else {
					throw new IllegalArgumentException("Return type of the template is not a string"); //$NON-NLS-1$
				}
			}
		} else {
			throw new IllegalArgumentException(
					"The template argument " + variable.getType() + " does not match with " + modelElement.getClass()); //$NON-NLS-1$ //$NON-NLS-2$
		}
	}

	/**
	 * Activates the traceability engine.
	 */
	public void activateTraceability() {
		this.traceabilityEnable = true;
	}

	/**
	 * traceability status getter.
	 * 
	 * @return the traceability status
	 */
	public boolean isTraceabilityEnable() {
		return traceabilityEnable;
	}

	/**
	 * Generated text getter.
	 * 
	 * @return the generated text.
	 */
	public String getGeneratedText() {
		return generatedContent;
	}

	/**
	 * Generated files content.
	 * 
	 * @return the generatedFilesContent
	 */
	public Map<String, String> getGeneratedFilesContent() {
		return generatedFilesContent;
	}

	/**
	 * Returns the list of all the generated files. This list will be empty with a simple generate(), use
	 * generateFile().
	 * 
	 * @return The list of all the generated files.
	 */
	public List<GeneratedFile> getGeneratedFiles() {
		return traceabilityListener.getGeneratedFiles();
	}

	/**
	 * Get if files are generated.
	 * 
	 * @return the filesGenerated
	 */
	public boolean hasGenerateFiles() {
		return filesGenerated;
	}
}
